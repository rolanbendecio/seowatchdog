{
  "name": "SEO Watchdog - GSC BigQuery Analysis",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "value": "0 9 * * *"
            }
          ]
        }
      },
      "id": "scheduler",
      "name": "Daily Schedule",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        240,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "projectId": "={{ $env.GCP_PROJECT_ID }}",
        "query": "WITH recent_data AS (\n  SELECT \n    date,\n    page,\n    query,\n    clicks,\n    impressions,\n    SAFE_DIVIDE(clicks, impressions) * 100 as ctr,\n    position,\n    country,\n    device\n  FROM `{{ $env.GCP_PROJECT_ID }}.searchconsole.searchdata_site_impression`\n  WHERE date >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)\n    AND date <= DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)\n),\npage_performance AS (\n  SELECT \n    page,\n    SUM(clicks) as total_clicks,\n    SUM(impressions) as total_impressions,\n    SAFE_DIVIDE(SUM(clicks), SUM(impressions)) * 100 as avg_ctr,\n    AVG(position) as avg_position,\n    COUNT(DISTINCT query) as keyword_count,\n    DATE_DIFF(CURRENT_DATE(), MAX(date), DAY) as days_since_last_data\n  FROM recent_data\n  GROUP BY page\n),\ntraffic_trends AS (\n  SELECT \n    page,\n    DATE_TRUNC(date, WEEK) as week,\n    SUM(clicks) as weekly_clicks,\n    SUM(impressions) as weekly_impressions\n  FROM recent_data\n  GROUP BY page, week\n),\nweekly_comparison AS (\n  SELECT \n    page,\n    LAG(weekly_clicks, 1) OVER (PARTITION BY page ORDER BY week) as prev_week_clicks,\n    weekly_clicks as current_week_clicks,\n    SAFE_DIVIDE(weekly_clicks - LAG(weekly_clicks, 1) OVER (PARTITION BY page ORDER BY week), LAG(weekly_clicks, 1) OVER (PARTITION BY page ORDER BY week)) * 100 as click_change_percent\n  FROM traffic_trends\n  WHERE week = DATE_TRUNC(DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY), WEEK)\n)\nSELECT \n  pp.page,\n  pp.total_clicks,\n  pp.total_impressions,\n  pp.avg_ctr,\n  pp.avg_position,\n  pp.keyword_count,\n  pp.days_since_last_data,\n  wc.click_change_percent,\n  CASE \n    WHEN wc.click_change_percent < -20 THEN 'traffic_drop'\n    WHEN wc.click_change_percent > 20 THEN 'traffic_surge'\n    WHEN pp.avg_ctr < 2 AND pp.total_impressions > 1000 THEN 'low_ctr'\n    WHEN pp.avg_position > 10 AND pp.total_impressions > 500 THEN 'low_position'\n    WHEN pp.days_since_last_data > 7 THEN 'potential_deindex'\n    ELSE 'normal'\n  END as alert_type\nFROM page_performance pp\nLEFT JOIN weekly_comparison wc ON pp.page = wc.page\nORDER BY pp.total_clicks DESC\nLIMIT 100"
      },
      "id": "bigquery_gsc_data",
      "name": "BigQuery - GSC Data",
      "type": "n8n-nodes-base.googleBigQuery",
      "typeVersion": 1,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "projectId": "={{ $env.GCP_PROJECT_ID }}",
        "query": "WITH indexed_pages AS (\n  SELECT \n    page_url,\n    last_crawl_time,\n    coverage_state,\n    is_excluded,\n    DATE_DIFF(CURRENT_DATE(), DATE(last_crawl_time), DAY) as days_since_crawl\n  FROM `{{ $env.GCP_PROJECT_ID }}.searchconsole.crawl_stats`\n  WHERE DATE(last_crawl_time) >= DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY)\n),\nindexing_changes AS (\n  SELECT \n    page_url,\n    coverage_state,\n    is_excluded,\n    days_since_crawl,\n    CASE \n      WHEN is_excluded = FALSE AND coverage_state = 'Valid' THEN 'newly_indexed'\n      WHEN is_excluded = TRUE OR coverage_state != 'Valid' THEN 'deindexed'\n      WHEN days_since_crawl > 7 THEN 'crawl_issue'\n      ELSE 'normal'\n    END as indexing_status\n  FROM indexed_pages\n)\nSELECT \n  page_url,\n  coverage_state,\n  is_excluded,\n  days_since_crawl,\n  indexing_status,\n  COUNT(*) OVER (PARTITION BY indexing_status) as status_count\nFROM indexing_changes\nWHERE indexing_status != 'normal'\nORDER BY days_since_crawl DESC\nLIMIT 50"
      },
      "id": "bigquery_indexing_data",
      "name": "BigQuery - Indexing Data",
      "type": "n8n-nodes-base.googleBigQuery",
      "typeVersion": 1,
      "position": [
        460,
        500
      ]
    },
    {
      "parameters": {
        "jsCode": "const gscData = $input.first().json;\nconst indexingData = $input.last().json;\n\nconst combineData = {\n  performance_data: gscData,\n  indexing_data: indexingData,\n  analysis_date: new Date().toISOString().split('T')[0],\n  total_pages_analyzed: gscData.length,\n  indexing_issues: indexingData.length\n};\n\nreturn { json: combineData };"
      },
      "id": "combine_data",
      "name": "Combine Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        400
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.anthropic.com/v1/messages",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "headers": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "body": {
          "parameters": [
            {
              "name": "model",
              "value": "claude-3-sonnet-20240229"
            },
            {
              "name": "max_tokens",
              "value": 2000
            },
            {
              "name": "messages",
              "value": "=[{\n  \"role\": \"user\",\n  \"content\": `You are an SEO analyst. Analyze the following Google Search Console data and provide actionable insights.\n\nPerformance Data:\n${JSON.stringify($json.performance_data, null, 2)}\n\nIndexing Data:\n${JSON.stringify($json.indexing_data, null, 2)}\n\nPlease provide analysis in this exact format:\n\n🔍 **SEO WATCHDOG REPORT - ${$json.analysis_date}**\n\n**📊 SUMMARY:**\n- Total Pages Analyzed: ${$json.total_pages_analyzed}\n- Indexing Issues Found: ${$json.indexing_issues}\n\n**⚠️ CRITICAL ALERTS:**\n[List any traffic drops > 20%, deindexing issues, or critical problems]\n\n**🔻 TRAFFIC DROPS:**\n[Pages with significant traffic decreases]\n\n**🔼 TRAFFIC SURGES:**\n[Pages with significant traffic increases]\n\n**📈 LOW CTR OPPORTUNITIES:**\n[Pages with high impressions but low CTR that need optimization]\n\n**🎯 POSITION IMPROVEMENT:**\n[Pages ranking 10+ that could be optimized]\n\n**🔗 INDEXING ISSUES:**\n[Newly deindexed pages or crawl problems]\n\n**✅ RECOMMENDATIONS:**\n[Specific actionable recommendations]\n\n**🚀 GROWTH OPPORTUNITIES:**\n[High-potential pages for optimization]\n\nKeep each section concise with bullet points. Use the emoji indicators as shown.`\n}]"
            }
          ]
        }
      },
      "id": "claude_analysis",
      "name": "Claude AI Analysis",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        900,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "const response = $json.content[0].text;\n\nconst formatForTelegram = {\n  report: response,\n  timestamp: new Date().toISOString(),\n  chat_id: $env.TELEGRAM_CHAT_ID,\n  parse_mode: 'Markdown'\n};\n\nreturn { json: formatForTelegram };"
      },
      "id": "format_report",
      "name": "Format Report",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1120,
        400
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot{{ $env.TELEGRAM_BOT_TOKEN }}/sendMessage",
        "headers": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "body": {
          "parameters": [
            {
              "name": "chat_id",
              "value": "={{ $json.chat_id }}"
            },
            {
              "name": "text",
              "value": "={{ $json.report }}"
            },
            {
              "name": "parse_mode",
              "value": "={{ $json.parse_mode }}"
            }
          ]
        }
      },
      "id": "send_telegram",
      "name": "Send to Telegram",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1340,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "const success = $json.ok;\nconst messageId = $json.message_id;\n\nconsole.log('Telegram Status:', success ? 'SUCCESS' : 'FAILED');\nconsole.log('Message ID:', messageId);\n\nreturn { \n  json: {\n    success: success,\n    message_id: messageId,\n    timestamp: new Date().toISOString()\n  }\n};"
      },
      "id": "log_result",
      "name": "Log Result",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        400
      ]
    }
  ],
  "connections": {
    "Daily Schedule": {
      "main": [
        [
          {
            "node": "BigQuery - GSC Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "BigQuery - Indexing Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "BigQuery - GSC Data": {
      "main": [
        [
          {
            "node": "Combine Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "BigQuery - Indexing Data": {
      "main": [
        [
          {
            "node": "Combine Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Combine Data": {
      "main": [
        [
          {
            "node": "Claude AI Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Claude AI Analysis": {
      "main": [
        [
          {
            "node": "Format Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Report": {
      "main": [
        [
          {
            "node": "Send to Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to Telegram": {
      "main": [
        [
          {
            "node": "Log Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-12-07T00:00:00.000Z",
      "updatedAt": "2024-12-07T00:00:00.000Z",
      "id": "seo",
      "name": "SEO"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-12-07T00:00:00.000Z",
  "versionId": "1"
}